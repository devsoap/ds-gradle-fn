/*
 * Copyright 2019 Devsoap Inc.
 *
 * Licensed under the Creative Commons Attribution-NoDerivatives 4.0
 * International Public License (the "License"); you may not use this file
 * except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *         https://creativecommons.org/licenses/by-nd/4.0/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
def fnType = 'com.devsoap.fn.extensions.FnExtension'
def fnProperty = 'fn'
def gradleType = 'gradle'
def fnCtx = context(ctype: fnType)
def scriptContext = context(scriptType: gradleType, filetypes:[gradleType], scope: scriptScope())
def closureCtx = context(scriptType: gradleType, filetypes:[gradleType], scope: closureScope())
def gradleArtifactRepositoryType = 'org.gradle.api.artifacts.repositories.ArtifactRepository'
def gradleDependencyType = 'org.gradle.api.artifacts.Dependency'

contributor(fnCtx, {
    if(enclosingCall('repositories')) {
        method name: 'fnproject', type: gradleArtifactRepositoryType

    } else if(enclosingCall('dependencies')) {
        method name: 'api', type: gradleDependencyType
        method name: 'flow', type: gradleDependencyType
        method name: 'groovy', type: gradleDependencyType
        method name: 'testingCore', type: gradleDependencyType
        method name: 'testingJunit4', type: gradleDependencyType
        method name: 'testingGroovy', type: gradleDependencyType

    }else if(!enclosingMember()){
        property name: "functionClass", type: String.name
        property name: 'functionMethod', type: String.name
        property name: 'functionPaths', type: List.name
    }
})

contributor(closureCtx, {
    if(enclosingCall('repositories') || enclosingCall('dependencies')) {
        property name: fnProperty, type: fnType
    }
    if(enclosingCall(fnProperty)) {
        property name: "functionClass", type: String.name
        property name: 'functionMethod', type: String.name
        property name: 'functionPaths', type: List.name
        property name: 'syslogUrl', type: String.name
    }
})

contributor(scriptContext, {
   property name: fnProperty, type: fnType
   method name: fnProperty, params: ['config': Closure.name], type: Void.name
})
